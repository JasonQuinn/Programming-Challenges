// Consider all integer combinations of ab for 2  a  5 and 2  b  5:
// 
// 2^2=4, 2^3=8, 2^4=16, 2^5=32
// 3^2=9, 3^3=27, 3^4=81, 3^5=243
// 4^2=16, 4^3=64, 4^4=256, 4^5=1024
// 5^2=25, 5^3=125, 5^4=625, 5^5=3125
// If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
// 
// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
// 
// How many distinct terms are in the sequence generated by a^b for 2 <= a <= 100 and 2 <= b <= 100?

open System

let pow num power =
    let rec powRec num1 power1 =
        if power1 <= 1I then num1
        else
            num1 * (powRec num1 (power1 - 1I))
    powRec num power

let numbersInSeq maxA maxB =
    let rec numbersInSeqRec maxA1 maxB1 a1 b1 list1 =
        if maxA1 = a1 && maxB1 = b1 then
            (pow a1 b1 :: list1) |> List.toSeq |> Seq.distinct |> Seq.sort
        else
            if b1 = maxB1 then numbersInSeqRec maxA1 maxB1 (a1 + 1I) 2I (pow a1 b1 :: list1)
            else numbersInSeqRec maxA1 maxB1 a1 (b1 + 1I) (pow a1 b1 :: list1)
    numbersInSeqRec maxA maxB 2I 2I []

printfn "%A" ((numbersInSeq 100I 100I) |> Seq.length)
Console.ReadKey() |> ignore