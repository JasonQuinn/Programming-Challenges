using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Numerics;
using System.Diagnostics;

namespace Problem29
{
    /// <summary>
    /// Consider all integer combinations of ab for 2  a  5 and 2  b  5:
    /// 
    /// 22=4, 23=8, 24=16, 25=32
    /// 32=9, 33=27, 34=81, 35=243
    /// 42=16, 43=64, 44=256, 45=1024
    /// 52=25, 53=125, 54=625, 55=3125
    /// If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
    /// 
    /// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
    /// 
    /// How many distinct terms are in the sequence generated by ab for 2  a  100 and 2  b  10
    /// </summary>
    class Program
    {
        static void Main(string[] args)
        {
            Stopwatch timer = new Stopwatch();
            timer.Start();
            Console.WriteLine("Count-{0}", ListOfPowers(100));
            timer.Stop();
            Console.WriteLine("Time-{0}", timer.Elapsed);
            Console.Read();
        }

        private static int ListOfPowers(int maxNumber)
        {
            List<BigInteger> list = new List<BigInteger>();
            for (BigInteger n = 2; n <= maxNumber; n++)
            {
                for (int p = 2; p <= maxNumber; p++)
                {
                    BigInteger powered = Power(n, p);
                    if (!list.Contains(powered))
                    {
                        list.Add(powered);
                    }
                }
            }
            return list.Count();
        }

        private static BigInteger Power(BigInteger number, int power)
        {
            if (power == 0)
            {
                return 1;
            }
            else if (power % 2 != 0)
            {
                BigInteger y;
                y = Power(number, (power - 1) / 2);
                return number * y * y;
            }
            else
            {
                BigInteger y;
                y = Power(number, power / 2);
                return y * y;
            }
        }

        //   if n = 0	then
        //   return 1
        //if n is odd then
        //   y  = Power(x, (n - 1)/ 2)
        //   return x · y ·y
        //else
        //   y = Power(x, n/ 2)
        //   return y · y

    }
}
