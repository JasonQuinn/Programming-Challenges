using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.Numerics;

namespace Problem45
{
    /// <summary>
    /// Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
    /// 
    /// Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
    /// Pentagonal	 	Pn=n(3n-1)/2	 	1, 5, 12, 22, 35, ...
    /// Hexagonal	 	Hn=n(2n-1)	 	1, 6, 15, 28, 45, ...
    /// It can be verified that T285 = P165 = H143 = 40755.
    /// 
    /// Find the next triangle number that is also pentagonal and hexagonal.
    /// </summary>
    class Program
    {
        static void Main(string[] args)
        {
            Stopwatch timer = new Stopwatch();
            timer.Start();
            Console.WriteLine("Triangle Pentagonal Hexagonal Number={0}", TrianglePentagonalHexagonal());
            timer.Stop();
            Console.WriteLine("Time={0}", timer.Elapsed);
            Console.Read();
        }

        private static IEnumerable<BigInteger> GetTriangleNumber()
        {
            Func<long, BigInteger> triangleNumber = n => (BigInteger)(0.5 * n * (n + 1));
            for (long i = 0; ; i++)
            {
                yield return triangleNumber(i);
            }
        }

        private static IEnumerable<BigInteger> GetPentagonalNumber()
        {
            Func<long, BigInteger> pentagonalNumber = n => (BigInteger)(0.5 * n * (3 * n - 1));
            for (long i = 0; ; i++)
            {
                yield return pentagonalNumber(i);
            }
        }

        private static IEnumerable<BigInteger> GetHexagonalNumber()
        {
            Func<long, BigInteger> hexagonalNumber = n => n * (2 * n - 1);
            for (long i = 0; ; i++)
            {
                yield return hexagonalNumber(i);
            }
        }

        private static BigInteger TrianglePentagonalHexagonal()
        {
            foreach (BigInteger hexagonalNumber in GetHexagonalNumber())
            {
                if (GetPentagonalNumber().TakeWhile(u => u <= hexagonalNumber).LastOrDefault() == hexagonalNumber)
                {
                    if (GetTriangleNumber().TakeWhile(u => u <= hexagonalNumber).LastOrDefault() == hexagonalNumber)
                    {
                        if (hexagonalNumber > 40755)
                        {
                            return hexagonalNumber;                            
                        }                        
                    }
                }
                Console.WriteLine(hexagonalNumber);
            }
            return -1;
        }
    }
}
